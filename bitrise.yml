format_version: 1.3.1
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - RELEASE_VERSION: 1.3.1

  - SAMPLE_APP_URL: https://github.com/bitrise-samples/sample-apps-xamarin-cross-platform.git
  - BITRISE_PROJECT_PATH: Multiplatform.sln
  - BITRISE_XAMARIN_CONFIGURATION: Release
  - BITRISE_XAMARIN_PLATFORM: iPhone

workflows:
  # ----------------------------------------------------------------
  # --- workflow to Step Test
  ci:
    before_run:
    - go-tests
    after_run:
    - test_ios
    - test_android_custom_options
    - test_macos_force_mdtool
    steps:
    - script:
        title: Cleanup _tmp dir
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            rm -rf ./_tmp
    - change-workdir:
        title: Switch working dir to _tmp
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - git-clone:
        title: Git clone Xamarin ios sample app
        run_if: true
        inputs:
        - repository_url: $SAMPLE_APP_URL
        - clone_into_dir: ./
        - commit: ""
        - tag: ""
        - branch: "master"
        - pull_request_id: ""
        - clone_depth: ""
    - certificate-and-profile-installer:
        title: Install Code Sign files
    - xamarin-user-management: 
        title: Xamarin login
    - nuget-restore:
        title: Nuget restore

  test_ios:
    after_run:
    - print_outputs
    steps:
    - path::./:
        title: Step test - ios
        inputs:
        - project_type_whitelist: ios
    - script:
        title: Check output Env. variables - iOS
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            if [[ ! -e $BITRISE_XCARCHIVE_PATH ]]; then exit 1; fi
            if [[ ! -e $BITRISE_IPA_PATH ]]; then exit 1; fi
            if [[ ! -e $BITRISE_DSYM_PATH ]]; then exit 1; fi
            if [[ ! -e $BITRISE_APP_PATH ]]; then exit 1; fi

  test_android_custom_options:
    after_run:
    - print_outputs
    steps:
    - path::./:
        title: Step test - android custom options
        inputs:
        - project_type_whitelist: android
        - ios_build_command_custom_options: /nologo
    - script:
        title: Check output Env. variables - Android
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            if [[ ! -e $BITRISE_APK_PATH ]]; then exit 1; fi

  test_macos_force_mdtool:
    after_run:
    - print_outputs
    steps:
    - path::./:
        title: Step test - macos force mdtool
        inputs:
        - force_mdtool: "yes"
        - project_type_whitelist: macos
    - script:
        title: Check output Env. variables - MacOS
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            if [[ ! -e $BITRISE_MACOS_XCARCHIVE_PATH ]]; then exit 1; fi
            if [[ ! -e $BITRISE_MACOS_APP_PATH ]]; then exit 1; fi
            if [[ ! -e $BITRISE_MACOS_PKG_PATH ]]; then exit 1; fi

  print_outputs:
    steps:
    - script:
        title: Output test
        is_always_run: true
        inputs:
        - content: |-
            echo "BITRISE_APK_PATH: $BITRISE_APK_PATH"
            echo
            echo "BITRISE_XCARCHIVE_PATH: $BITRISE_XCARCHIVE_PATH"
            echo "BITRISE_IPA_PATH: $BITRISE_IPA_PATH"
            echo "BITRISE_DSYM_PATH: $BITRISE_DSYM_PATH"
            echo "BITRISE_APP_PATH: $BITRISE_APP_PATH"
            echo
            echo "BITRISE_TVOS_XCARCHIVE_PATH: $BITRISE_TVOS_XCARCHIVE_PATH"
            echo "BITRISE_TVOS_IPA_PATH: $BITRISE_TVOS_IPA_PATH"
            echo "BITRISE_TVOS_DSYM_PATH: $BITRISE_TVOS_DSYM_PATH"
            echo "BITRISE_TVOS_APP_PATH: $BITRISE_TVOS_APP_PATH"
            echo
            echo "BITRISE_MACOS_XCARCHIVE_PATH: $BITRISE_MACOS_XCARCHIVE_PATH"
            echo "BITRISE_MACOS_APP_PATH: $BITRISE_MACOS_APP_PATH"
            echo "BITRISE_MACOS_PKG_PATH: $BITRISE_MACOS_PKG_PATH"

            envman add --key BITRISE_APK_PATH --value ""

            envman add --key BITRISE_XCARCHIVE_PATH --value ""
            envman add --key BITRISE_IPA_PATH --value ""
            envman add --key BITRISE_DSYM_PATH --value ""
            envman add --key BITRISE_APP_PATH --value ""

            envman add --key BITRISE_TVOS_XCARCHIVE_PATH --value ""
            envman add --key BITRISE_TVOS_IPA_PATH --value ""
            envman add --key BITRISE_TVOS_DSYM_PATH --value ""
            envman add --key BITRISE_TVOS_APP_PATH --value ""

            envman add --key BITRISE_MACOS_XCARCHIVE_PATH --value ""
            envman add --key BITRISE_MACOS_APP_PATH --value ""
            envman add --key BITRISE_MACOS_PKG_PATH --value ""

  go-tests:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go test ./...

  _install-test-tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck

            # Go lint
            go get -u -v github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- Utility workflows
  godeps-update:
    title: Godeps update
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u -v github.com/tools/godep

            rm -rf ./Godeps
            rm -rf ./vendor

            go get -t -d ./...
            godep save ./...

  # ----------------------------------------------------------------
  # --- workflow to create Release version
  create-release:
    title: Create release with Releaseman
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u github.com/bitrise-tools/releaseman
            export CI=true
            releaseman create --version "$RELEASE_VERSION"

  # ----------------------------------------------------------------
  # --- workflow to Share this step into a Step Library
  audit-this-step:
    title: Audit the Step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - STEP_ID_IN_STEPLIB: xamarin-archive
      - STEP_GIT_VERION_TAG_TO_SHARE: $RELEASE_VERSION
      - STEP_GIT_CLONE_URL: https://github.com/bitrise-steplib/steps-xamarin-archive.git
    title: Share the Step
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share
      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!
      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.
      You're now ready to share this Step, just make sure that
      the `STEP_ID_IN_STEPLIB` and `STEP_GIT_VERION_TAG_TO_SHARE`
      environments are set to the desired values!
      To share this Step into a StepLib you can just run: $ bitrise run share-this-step
      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c ${MY_STEPLIB_REPO_FORK_GIT_URL}
            bitrise share create --stepid ${STEP_ID_IN_STEPLIB} --tag ${STEP_GIT_VERION_TAG_TO_SHARE} --git ${STEP_GIT_CLONE_URL}
            bitrise share finish
